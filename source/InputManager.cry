import Game;
import Gamepad;
import Math;
import UserData;

class MyEvent {
	field key;
	field down;
	field up;
	
	constructor(key, down) {
		this.key = key;
		this.down = down;
		this.up = !down;
	}
}

function get_input_manager() {
	if (InputManager._input_manager == null) {
		InputManager._input_manager = new InputManager();
	}
	return InputManager._input_manager;
}

class InputManager {

	static field _input_manager = null;

	field cursor = [0, 0];
	field mouse_pressed = false;
	field mouse_events = [];
	field joysticks = [];
	field active_joystick = -1;
	field raw_keyups = [];
	field active_actual_joystick = -1;
	field events = [];
	field quitAttempt = false;
	field my_pressed;
	field axes = [0.0, 0.0];
	field _key_mapping;
	field actual_joysticks;
	
	constructor() {
		this.cursor = [0, 0];
		this.mouse_pressed = false;
		this.mouse_events = [];
		this.joysticks = [];
		this.active_joystick = -1;
		this.raw_keyups = [];
		this.read_config_save();
		this.active_actual_joystick = -1;
		this.activate_joysticks();
		this.events = [];
		this.quitAttempt = false;
		this.init_default_key_config();
		this.my_pressed = {
			'start': false,
			'left': false,
			'right': false,
			'up': false,
			'down': false,
			'spray': false,
			'walkie': false
		};
	}
	
	function init_default_key_config() {
		this._key_mapping = {
			Game.KeyboardKey.ENTER: 'start',
			Game.KeyboardKey.LEFT: 'left',
			Game.KeyboardKey.RIGHT: 'right',
			Game.KeyboardKey.UP: 'up',
			Game.KeyboardKey.DOWN: 'down',
			Game.KeyboardKey.SPACE: 'spray',
			Game.KeyboardKey.W: 'walkie'
		};
		t = null;
		if (UserData.fileExists('key_config.txt')) {
			t = UserData.fileReadText('key_config.txt');
		}
		
		things = 'start left right up down spray walkie'.split(' ');
		if (t != null) {
			for (line : t.split('\n')) {
				parts = line.split(':');
				if (parts.length == 2) {
					action = parts[0];
					value = Core.parseInt(parts[1]);
					
					if (value > 0 && things.contains(action)) {
						for (k : this._key_mapping.keys()) {
							if (this._key_mapping[k] == action) {
								this._key_mapping.pop(k);
								break;
							}
						}
						this._key_mapping[value] = action;
					}
				}
			}
		}
	}
	
	function save_key_config() {
		output = [];
		for (key : this._key_mapping.keys()) {
			action = this._key_mapping[key];
			output.add(action + ':' + str(key));
		}
		output = output.join('\r\n');
		UserData.fileWriteText('key_config.txt', output);
	}
	
	function set_key_config(action, key) {
		for (k : this._key_mapping.keys()) {
			if (this._key_mapping[k] == action) {
				this._key_mapping.pop(k);
				break;
			}
		}
		this._key_mapping[key] = action;
	}
	
	function set_active_actual_joystick(id) {
		if (id == -1) {
			this.active_actual_joystick = -1;
			this.active_joystick = -1;
		} else if (this.actual_joysticks.length > id) {
			this.active_actual_joystick = id;
			name = this.actual_joysticks[this.active_actual_joystick].getName().trim();
			found = false;
			i = 0;
			for (js : this.joysticks) {
				if (js.get('name', '').lower() == name.lower()) {
					found = true;
					this.active_joystick = i;
				}
				i++;
			}
			if (!found) {
				this.active_joystick = this.joysticks.length;
				this.joysticks.add({'name': name});
			}
		}
	}
	
	function get_config_label_for_key_for_keyboard(key) {
		for (k : this._key_mapping.keys()) {
			if (this._key_mapping[k] == key) {
				// TODO: oh no
				output = 'KEY-' + k; // pygame.key.name(k);
				return output[0].upper() + output[1:];
			}
		}
		return "Not configured!";
	}
	
	function get_config_label_for_key_for_active(key) {
		if (this.active_joystick != -1) {
			js = this.joysticks[this.active_joystick];
			value = js.get(key, null);
			if (value == null) {
				return "Not configured!";
			}
			if (value[0] == 'axis') {
				output = "Axis " + str(value[1]);
				if (value[2].endsWith('+')) {
					output = "Positive " + output;
				} else {
					output = "Negative " + output;
				}
			} else if (value[0] == 'hat') {
				output = "Hat " + str(value[1]);
				if (value[2].startsWith('x')) {
					output = "X " + output;
				} else {
					output = "Y " + output;
				}
				if (value[2].endsWith('-')) {
					output = "Negative " + output;
				} else {
					output = "Positive " + output;
				}
			} else {
				output = "Button " + str(value[1]);
			}
				
			return output;
		}
		return "---";
	}
	
	function get_cursor_position() {
		return this.cursor;
	}
	
	function get_mouse_status() {
		return this.mouse_pressed;
	}
	
	function get_events(window) {
		events = [];
		this.raw_keyups = [];
		keyboard_only = true;
		this.axes = [0.0, 0.0];
		for (event : window.pumpEvents()) {
			if (event.type == Game.EventType.QUIT) {
				this.quitAttempt = true;
				return [];
			} else if (event.type == Game.EventType.MOUSE_LEFT_DOWN || event.type == Game.EventType.MOUSE_LEFT_UP) {
				this.mouse_events.add([event.x, event.y, false, event.down]);
				this.cursor = [event.x, event.y];
				this.mouse_pressed = event.down;
			} else if (event.type == Game.EventType.MOUSE_MOVE) {
				this.mouse_events.add([event.x, event.y, true, false]);
				this.cursor = [event.x, event.y];
			} else if (event.type == Game.EventType.KEY_DOWN || event.type == Game.EventType.KEY_UP) {
				if (!event.down) {
					this.raw_keyups.add(event.key);
				}
				action = this._key_mapping.get(event.key);
				
				if (action != null) {
					this.my_pressed[action] = event.down;
					events.add(new MyEvent(action, event.down));
				}
			}
		}
		this.axes[0] = this.my_pressed['right'] ? 2.0 : 0.0;
		this.axes[0] = this.my_pressed['left'] ? -2.0 : this.axes[0];
		this.axes[1] = this.my_pressed['down'] ? 2.0 : 0.0;
		this.axes[1] = this.my_pressed['up'] ? -2.0 : this.axes[1];

		joystick = null;
		config = null;
		any_axes_found = false;
		if (this.active_joystick != -1) {
			config = this.joysticks[this.active_joystick];
			name = config.get('name', '');
			for (js : this.actual_joysticks) {
				name2 = js.getName();
				if (name.lower() == name2.lower()) {
					joystick = js;
					break;
				}
			}
		}
		
		if (joystick != null && config != null) {
			cached_poll = {};
			for (action : ['right', 'left', 'up', 'down', 'start', 'spray', 'walkie']) {
				direction = false;
				c = config.get(action, null);
				x = false;
				if (c != null) {
					n = c[1];
					if (c[0] == 'axis') {
						direction = true;
						x = cached_poll.get('a' + str(n));
						if (x == null) {
							x = joystick.getAxisState(n);
							if (Math.abs(x) < 0.01) {
								x = 0;
							}
							cached_poll['a' + str(n)] = x;
						}
						if (c[2][1] == '+') {
							if (x < 0) {
								x = 0;
							}
						} else {
							if (x > 0) {
								x = 0;
							} else {
								x *= -1;
							}
						}
						x = Math.abs(x);
						
						if (x > 0.01) {
							keyboard_only = false;
							if (!any_axes_found) {
								any_axes_found = true;
								this.axes = [0.0, 0.0];
							}
						}
					} else if (c[0] == 'hat') {
						direction = true;
						x = cached_poll.get('h' + str(n));
						if (x == null) {
							x = joystick.get_hat(n);
							cached_poll['h' + str(n)] = x;
						}
						if (c[2][0] == 'x') {
							x = x[0];
						} else {
							x = x[1];
						}
						
						if (c[2][1] == '+') {
							if (x < 0) {
								x = 0;
							}
						} else {
							if (x > 0) {
								x = 0;
							} else {
								x *= -1;
							}
						}
						x = Math.abs(x);
					} else if (c[0] == 'button') {
						x = cached_poll.get('b' + str(n));
						if (x == null) {
							x = joystick.getButtonState(n);
							cached_poll['b' + str(n)] = x;
						}
					}
					
					// TODO: switch statement
					if (action == 'start' || action == 'spray' || action == 'walkie') {
						pushed = x;
						if (direction) {
							pushed = x >= .5;
						}
						if (this.my_pressed[action] != pushed) {
							this.my_pressed[action] = pushed;
							events.add(new MyEvent(action, pushed));
						}
					} else if (action == 'left' || action == 'right' || action == 'down' || action == 'up') {
						
						toggled = false;
						if (direction) {
							pushed = x + 0.0;
						} else {
							pushed = pushed < .5 ? 0.0 : 1.0;
						}
						toggled = pushed > .2;
						if (pushed < 0.01) {
							pushed = 0;
						}
						
						if (toggled != this.my_pressed[action]) {
							this.my_pressed[action] = toggled;
							events.add(new MyEvent(action, toggled));
						}
						
						if (action == 'left') {
							if (Math.abs(this.axes[0]) < 0.01 && pushed > 0.01) {
								this.axes[0] = -2 * pushed;
							}
						} else if (action == 'right') {
							if (Math.abs(this.axes[0]) < 0.01 && pushed > 0.01) {
								this.axes[0] = 2 * pushed;
							}
						} else if (action == 'up') {
							if (Math.abs(this.axes[1]) < 0.01 && pushed > 0.01) {
								this.axes[1] = -2 * pushed;
							}
						} else if (action == 'down') {
							if (Math.abs(this.axes[1]) < 0.01 && pushed > 0.01) {
								this.axes[1] = 2 * pushed;
							}
						}
					}
				}
			}
		}
		
		this.axes[0] = this.axes[0] / 1.8;
		
		x = this.axes[0];
		y = this.axes[1];
		
		if (!any_axes_found && x != 0 && y != 0) {
			xsign = x > 0 ? 1 : -1;
			ysign = y > 0 ? 1 : -1;
			x = 1.2 * xsign;
			y = 1.2 * ysign;
		}
			
		if (Math.abs(x) < 0.05 && Math.abs(y) < 0.05) {
			rx = 0.0;
			ry = 0.0;
		} else {
			ang = 3.14159265 / 4.0;
			c = Math.cos(ang);
			s = Math.sin(ang);
			rx = x * c + y * s;
			ry = -x * s + y * c;
		}
		
		this.axes[0] = rx / 1.8;
		this.axes[1] = ry / 1.8;
		
		return events;
	}
			
	function activate_joysticks() {
		this.actual_joysticks = [];
		active_joystick_name = null;
		if (this.active_joystick != -1) {
			active_joystick_name = this.joysticks[this.active_joystick].get('name', '').trim().lower();
		}
		Gamepad.GamepadManager.refreshDevices();
		deviceCount = Gamepad.GamepadManager.getDeviceCount();
		for (i = 0; i < deviceCount; ++i) {
			js = Gamepad.GamepadManager.getDeviceByIndex(i);
			this.actual_joysticks.add(js);
			name = js.getName().trim().lower();
			if (name == active_joystick_name) {
				this.active_actual_joystick = i;
			}
		}
		
		if (this.active_actual_joystick == -1) {
			this.active_joystick = -1;
		}
	}
	
	function verify_axis_value(x) {
		return x.length == 2 && 
			(x[0] == 'x' || x[0] == 'y') && 
			(x[1] == '-' || x[1] == '+');
	}
	
	// TODO: remove all this in favor of the built in Gamepad stuff.
	function save_config() {
		output = [];
		if (this.active_joystick != -1 && this.active_joystick < this.joysticks.length) {
			output.add('#active: ' + this.joysticks[this.active_joystick].get('name', ''));
		} else {
			output.add('#active: ');
		}
		for (joystick : this.joysticks) {
			output.add(this._save_joystick(joystick));
		}
		output = output.join('$');
		UserData.fileWriteText('input_config.txt', output);
	}
	
	function _save_joystick(config) {
		output = [];
		for (key : config.keys()) {
			if (key == 'name') {
				value = config[key];
			} else {
				value = config[key].join(' ');
			}
			
			row = '#' + key + ': ' + value;
			
			output.add(row);
		}
		
		return output.join('\r\n');
	}
	
	function read_config_save() {
		prev = null;
		if (UserData.fileExists('input_config.txt')) {
			prev = UserData.fileReadText('input_config.txt');
		}
		if (prev != null) {
			data = prev.trim().split('$');
			if (data.length > 0) {
				active = data[0].trim();
				parts = active.split(':');
				active_joystick_name = null;
				if (parts.length >= 2 && parts[0].trim() == '#active') {
					active_joystick_name = parts[1:].join(':').trim();
				}
				for (config : data[1:]) {
					lines = config.split('\n');
					data = {};
					for (line : lines) {
						line = line.trim();
						if (line.length > 0 && line[0] == '#') {
							parts = line[1:].split(':');
							if (parts.length == 2) {
								key = parts[0].trim();
								value = parts[1].trim().split(' ');
								if (value[0] == 'axis') {
									if (value.length == 3) {
										n = Core.parseInt(value[1]);
										if (this.verify_axis_value(value[2])) {
											data[key] = ['axis', n, value[2]];
										}
									}
								} else if (value[0] == 'button') {
									if (value.length == 2) {
										n = Core.parseInt(value[1]);
										data[key] = ['button', n];
									}
								} else if (value[0] == 'hat') {
									if (value.length == 3) {
										n = Core.parseInt(value[1]);
										if (this.verify_axis_value(value[2])) {
											data[key] = ['hat', n, value[2]];
										}
									}
								} else if (key == 'name') {
									data[key] = value.join(' ').trim();
								}
							}
						}
					}
					name = data.get('name', null);
					if (name != null && name.length > 0) {
						if (active_joystick_name != null && active_joystick_name.lower() == name.lower()) {
							this.active_joystick = this.joysticks.length;
						}
						this.joysticks.add(data);
					}
				}
			}
		}
	}
	
	function get_mouse_events() {
		output = this.mouse_events;
		this.mouse_events = [];
		return output;
	}
}
