class MovingPlatformManager {
	
	constructor(level) {
		this.level = level;
		this.ticker = 0;
		this.pause_tokens = {};
		this.initialize_pause_tokens(level.name);
		
		directions = get_hacks_for_level(level.name, 'moving_platforms');
		if (directions == None) {
			directions = [];
		} else {
			for (i = 0; i < directions.length; ++i) {
				directions[i] = directions[i].split(' ');
			}
		}
		this.platforms = this.level.get_moving_platforms();
		this.num_platforms = len(this.platforms);
		while (len(directions) < this.num_platforms) {
			directions.add(['P']);
		}
		this.directions = directions;
	}
	
	function set_pause_token(i, on) {
		this.pause_tokens[str(i)] = on;
	}
	
	function initialize_pause_tokens(name) {
		pt = this.pause_tokens;
		if (name == '16-0') {
			pt['0'] = True;
		} else if (name == '18-0') {
			for (i : py_range(11)) {
				pt[str(i)] = True;
			}
		} else if (name == '24-0') {
			pt['2'] = True;
		} else if (name == '25-0') {
			for (i : py_range(9)) {
				pt[str(i)] = True;
			}
		} else if (name == '90-0') {
			pt['0'] = True;
		}
	}
	
	function is_paused_platform(i) {
		if (this.pause_tokens.get(str(i)) == True) {
			return True;
		}
		return False;
	}
	
	function update(sprites, render_exceptions) {
		this.ticker += 1;
		if (this.ticker % 60 == 0) {
			level = this.level;
			for (i = 0; i < this.num_platforms; ++i) {
				
				if (!this.is_paused_platform(i)) {
				
					platform = this.platforms[i];
					directions = this.directions[i];
					direction = directions[0];
					if (direction == 'P') {
						directions.removeAt(0);
						directions.add('P');
					} else {
						target = [platform[0], platform[1], platform[2]];
						
						if (direction == 'NW') {
							target[0] -= 1;
							offset = [-1, 0];
						} else if (direction == 'NE') {
							target[1] -= 1;
							offset = [0, -1];
						} else if (direction == 'SW') {
							target[1] += 1;
							offset = [0, 1];
						} else {
							target[0] += 1;
							offset = [1, 0];
						}
						t_lower = level.get_tile_at(target[0], target[1], target[2]);
						t_upper = level.get_tile_at(target[0], target[1], target[2] + 1);
						if (t_lower == None && t_upper == None) {
							move_us = [platform];
							
							z = move_us[-1][2] + 2;
							col = platform[0];
							row = platform[1];
							lookupStack = level.cellLookup[col][row];
							stack = level.grid[col][row];
							spritification = [];
							while (z < len(lookupStack)) {
								if (lookupStack[z] != None) {
									tile = stack[lookupStack[z]];
									if (tile != None) {
										if (tile.pushable) {
											
											neighbor_lookup = level.cellLookup[col + offset[0]][row + offset[1]];
											neighbor_stack = level.grid[col + offset[0]][row + offset[1]];
											blocked = False;
											if (len(spritification) == 0) {
												for (z_offset : [z + 0, z + 1]) {
													if (len(neighbor_lookup) <= z_offset) {
														// pass
													} else {
														
														if (z_offset < 0) {
															ntile = None;
														} else {
															ntile = neighbor_lookup[z_offset];
														}
														
														if (ntile != None) {
															ntile = neighbor_stack[ntile];
															if (ntile != None && ntile.blocking) {
																blocked = True;
																break;
															}
														}
													}
												}
											} else {
												blocked = True;
											}
											loc = [col, row, z];
											if (blocked) {
												spritification.add(loc);
											} else {
												move_us.add(loc);
											}
											
											z += tile.height - 1;
										} else {
											break;
										}
									} else {
										break;
									}
								} else {
									break;
								}
								z += 1;
							}
							
							for (block : spritification) {
								level.spritify_block(block[0], block[1], block[2]);
							}
							
							first = True;
							for (move_me : move_us) {
								mp = level.modify_block(move_me[0], move_me[1], move_me[2], None);
								target = [move_me[0] + offset[0], move_me[1] + offset[1], move_me[2]];
								level.modify_block(target[0], target[1], target[2], mp);
								
								if (first) {
									this.platforms[i] = target;
								}
								render_exceptions.add(new RenderException(move_me, direction, mp, True));
								first = False;
							}
							directions.add(directions.removeAt(0));
							
							for (sprite : sprites) {
								if (sprite.standingon != None && 
									Math.floor(sprite.x / 16) == move_us[-1][0] &&
									Math.floor(sprite.y / 16) == move_us[-1][1] && 
									Math.floor(sprite.z / 8) == move_us[-1][2] + 2) {
									
									sx = Math.floor(sprite.x / 16);
									if (sx == move_us[-1][0]) {
										sy = Math.floor(sprite.y / 16);
										sz = Math.floor(sprite.z / 8);
										if (sy == move_us[-1][1] && sz == move_us[-1][2] + 2) {
											coords = [Math.floor(sprite.x / 16), Math.floor(sprite.y / 16), Math.floor(sprite.z / 8)];
											target = [coords[0] + offset[0], coords[1] + offset[1], coords[2]];
											lookup = level.cellLookup[target[0]][target[1]];
											stack = level.grid[target[0]][target[1]];
											blocked = False;
											for (_i : py_range(sprite.height)) {
												check = [target[0], target[1], target[2] + _i];
												t = level.get_tile_at(check);
												if (t != None && t.blocking) {
													blocked = True;
												}
											}
											if (!blocked) {
												render_exceptions.add(new RenderException(coords, direction, sprite, False));
												sprite.x += offset[0] * 16;
												sprite.y += offset[1] * 16;
											} else {
												sprite.standingon = None;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
