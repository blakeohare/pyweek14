function make_key(x, y, z) {
	return x + '|' + y + '|' + z;
}

function make_ckey(c) {
	return c[0] + '|' + c[1] + '|' + c[2];
}

class Circuits {
	constructor(level) {
		self.level = level;
		self.refresh_groups(True);
	}
	
	function LAMBDA_1(x) {
		return self.groups_by_coords[make_ckey(x)];
	}
	
	function refresh_charges() {
		goo_was_fried = False;
		on_circuits = get_hacks_for_level(self.level.name, 'on_circuits');
		if (on_circuits == None) {
			on_circuits = [];
		}
		active_input_panels = [];
		for (input_panel : self.power_in) {
			x = input_panel[0];
			y = input_panel[1];
			z = input_panel[2];
			lookup = self.level.cellLookup[x][y];
			if (z + 1 < len(lookup)) {
				ti = lookup[z + 1];
				if (ti != None) {
					t = self.level.grid[x][y][ti];
					if (t != None && t.id == '45') {
						active_input_panels.add(input_panel);
					}
				}
			}
		}
		
		on_groups = (on_circuits + active_input_panels + self.permanently_on).map(this.LAMBDA_1);
		group_id = 1;
		max_group_id = len(self.coords_by_group) - 1;
		while (group_id <= max_group_id) {
			is_group_on = on_groups.contains(group_id);
			for (coord : self.coords_by_group[group_id]) {
				tile = self.level.get_tile_at(coord);
				if (tile.actual_circuit) {
					id = tile.id;
					if (id.endsWith('on')) {
						id = id[:-2];
					}
					id = is_group_on ? (id + 'on') : id;
					tile = get_tile_store().get_tile(id);
					self.level.modify_block(coord[0], coord[1], coord[2], tile);
					if (is_group_on) {
						goo_check = self.level.get_tile_at(coord[0], coord[1], coord[2] + 1);
						if (goo_check != None && goo_check.is_goo) {
							self.level.modify_block(coord[0], coord[1], coord[2] + 1, None);
							goo_was_fried = True;
						}
					}
				}
			}
			group_id += 1;
		}
		self.on_groups = on_groups;
		if (goo_was_fried) {
			// TODO: play frying goo noise
		}
	}
	
	function refresh_groups(first_time=False) {
		self.groups = [];
		permanently_on = [];
		grid = self.level.grid;
		width = self.level.width;
		height = self.level.height;
		circuits = [];
		circuits_by_loc = {};
		self.power_in = [];
		y = 0;
		while (y < height) {
			x = 0;
			while (x < width) {
				stack = grid[x][y];
				z = 0;
				for (item : stack) {
					if (item == None) {
						z += 1;
					} else {
						if (item.circuit) {
							circuits.add([x, y, z]);
							circuits_by_loc[x +'|' + y + '|' + z] = [];
							if (first_time && item.id.endsWith('on')) {
								permanently_on.add([x, y, z]);
							}
						}
						if (item.power_input) {
							self.power_in.add([x, y, z]);
						}
						z += item.height;
					}
				}
				x += 1;
			}
			y += 1;
		}
		
		tags = {}; // key -> group name
		
		for (circuit : circuits) {
			x = circuit[0];
			y = circuit[1];
			z = circuit[2];
			neighbors = [
				circuits_by_loc.get(make_key(x, y - 1, z)),
				circuits_by_loc.get(make_key(x, y + 1, z)),
				circuits_by_loc.get(make_key(x + 1, y, z)),
				circuits_by_loc.get(make_key(x - 1, y, z))];
			for (neighbor : neighbors) {
				if (neighbor != None) {
					neighbor.add(circuit);
				}
			}
		}
		
		group_id = 0;
		while (len(circuits) > 0) {
			group_id += 1;
			circuit = circuits.pop();
			while (tags.get(make_ckey(circuit)) != None) {
				if (len(circuits) > 0) {
					circuit = circuits.pop();
				} else {
					circuit = None;
					break;
				}
			}
			
			if (circuit != None) {
				queue = [circuit];
				while (len(queue) > 0) {
					item = queue.pop();
					k = make_ckey(item);
					tags[k] = group_id;
					for (neighbor : circuits_by_loc[k]) {
						if (tags.get(make_ckey(neighbor)) == None) {
							tags[make_ckey(neighbor)] = group_id;
							queue.add(neighbor);
						}
					}
				}
			}
		}
		
		groups_to_coords = [[]];
		for (k : tags.keys()) {
			group_id = tags[k];
			while (len(groups_to_coords) <= group_id) {
				groups_to_coords.add([]);
			}
			coords = k.split('|').map(Core.parseInt);
			groups_to_coords[group_id].add([coords[0], coords[1], coords[2]]);
		}
		self.coords_by_group = groups_to_coords;
		self.groups_by_coords = tags;
		if (first_time) {
			self.permanently_on = permanently_on;
		}
		self.refresh_charges();
	}
	
	function is_charged(x, y, z) {
		k = make_key(x, y, z);
		group_id = self.groups_by_coords.get(k, 0);
		if (group_id > 0) {
			return self.on_groups.contains(group_id);
		}
		return false;
	}
}
