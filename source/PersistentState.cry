import UserData;

// persistent state cannot save strings with newlines across "forever" sessions

function get_persistent_state() {
	if (PersistentState.INSTANCE == null) {
		PersistentState.INSTANCE = new PersistentState();
	}
	return PersistentState.INSTANCE;
}

function load_persistent_state() {
	get_persistent_state().load_game();
}

function save_persistent_state() {
	get_persistent_state().save_game();
}

function get_persisted_forever_int(name) { return get_persistent_state().get_int_forever(name); }
function get_persisted_session_int(name) { return get_persistent_state().get_int_session(name); }
function get_persisted_level_int(name) { return get_persistent_state().get_int_level(name); }

function get_persisted_forever_string(name) { return get_persistent_state().get_string_forever(name); }
function get_persisted_session_string(name) { return get_persistent_state().get_string_session(name); }
function get_persisted_level_string(name) { return get_persistent_state().get_string_level(name); }

function set_persisted_forever_int(name, value) { return get_persistent_state().set_int_forever(name, value); }
function set_persisted_session_int(name, value) { return get_persistent_state().set_int_session(name, value); }
function set_persisted_level_int(name, value) { return get_persistent_state().set_int_level(name, value); }

function set_persisted_forever_string(name, value) { return get_persistent_state().set_string_forever(name, value); }
function set_persisted_session_string(name, value) { return get_persistent_state().set_string_session(name, value); }
function set_persisted_level_string(name, value) { return get_persistent_state().set_string_level(name, value); }

function increment_persisted_forever_int(name, amount) {
	set_persisted_forever_int(name, get_persisted_forever_int(name) + amount);
}

function increment_persisted_level_int(name, amount) {
	set_persisted_level_int(name, get_persisted_level_int(name) + amount);
}

function increment_persisted_session_int(name, amount) {
	set_persisted_session_int(name, get_persisted_session_int(name) + amount);
}

function persistence_change_level() {
	get_persistent_state().level = {};
}

class PersistentState {
	
	static field INSTANCE = null;

	field forever = {};
	field session = {};
	field level = {};
	
	constructor() { }
	
	function purge_all() {
		this.forever.clear();
		this.session.clear();
		this.level.clear();
	}
	
	function save_game() {
		UserData.fileWriteText('save.txt', this.serialize());
	}
	
	function change_level() {
		this.level.clear();
	}
	
	function serialize() {
		output = [];
		for (key : this.forever.keys()) {
			value = this.forever[key];
			if (value[1] == null) {
				value[1] = '';
			}
			output.add(value[0] + key + ':' + str(value[1]));
		}
		return output.join('\n');
	}
	
	function load_game() {
		t = null;
		if (UserData.fileExists('save.txt')) {
			t = UserData.fileReadText('save.txt');
		}
		values = {};
		if (t != null) {
			lines = t.split('\n');
			for (line : lines) {
				parts = line.split(':');
				if (parts.length >= 2) {
					key = parts[0];
					value = parts[1:].join(':');
					if (key.length >= 2) {
						type = key[0];
						name = key[1:];
						if (type == 'i') {
							value = Core.parseInt(value) ?? 0;
						} else {
							type = 's';
						}
						values[name] = [type, value];
					}
				}
			}
		}
		
		this.forever = values;
	}
	
	function set_int_forever(name, value) {
		this._set_int(name, value, this.forever);
	}
	
	function set_int_session(name, value) {
		this._set_int(name, value, this.session);
	}
	
	function set_int_level(name, value) {
		this._set_int(name, value, this.level);
	}
	
	function get_int_forever(name) {
		return this._get_int(name, this.forever);
	}
	
	function get_int_session(name) {
		return this._get_int(name, this.session);
	}
	
	function get_int_level(name) {
		return this._get_int(name, this.level);
	}
	
	function set_string_forever(name, value) {
		this._set_string(name, value, this.forever);
	}
	
	function set_string_session(name, value) {
		this._set_string(name, value, this.session);
	}
	
	function set_string_level(name, value) {
		this._set_string(name, value, this.level);
	}
	
	function get_string_forever(name) {
		return this._get_string(name, this.forever);
	}
	
	function get_string_session(name) {
		return this._get_string(name, this.session);
	}
	
	function get_string_level(name) {
		return this._get_string(name, this.level);
	}
	
	function _set_int(name, value, lookup) {
		lookup[name] = ['i', value];
	}
	
	function _set_string(name, value, lookup) {
		lookup[name] = ['s', value];
	}
	
	function _get_int(name, lookup) {
		value = lookup.get(name);
		if (value != null && value[0] == 'i') {
			return value[1];
		}
		return 0;
	}
	
	function _get_string(name, lookup) {
		value = lookup.get(name);
		if (value != null && value[0] == 's') {
			return value[1];
		}
		return '';
	}
}
