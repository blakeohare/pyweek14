import Audio;
import Game;
import Math;

const _MUSIC_ENABLED = true;

function get_jukebox() {
	if (JukeBox.INSTANCE == null) {
		JukeBox.INSTANCE = new JukeBox();
	}
	return JukeBox.INSTANCE;
}

function play_sound(path) {
	if (is_music_off()) return;
	get_jukebox().play_sound(path);
}

function is_music_off() {
	return !_MUSIC_ENABLED;
}

class JukeBox {

	static field INSTANCE = null;

	field current = null;
	field sounds = {};
	field musics = {};
	field music_map;
	field music_volume;
	field sfx_volume;
	
	constructor() {
		
		ps = get_persistent_state();
		if (ps.forever.get('sfx') != null) {
			this.set_music_volume(ps.get_int_forever('music'));
			this.set_sfx_volume(ps.get_int_forever('sfx'));
		} else {
			this.set_music_volume(70);
			this.set_sfx_volume(70);
		}
		this.music_map = {
			'intro': 'biologytake2',
			'12-0': 'chemistry',
			'13-0': 'chemistry',
			'14-0': 'chemistry',
			'17-3': 'chemistry',
			'18-0': 'chemistry',
			'19a-0': 'chemistry',
			'19b-1': 'chemistry',
			'19-0': 'chemistry',
			'99-0': 'bossmusic',
		};
	}
	
	function get_song_normalization(name) {
		if (name == 'title') {
			return 1;
		}
		return .3;
	}
	
	function set_music_volume(percent) {
		percent = Math.max(0, Math.min(100, Math.floor(percent)));
		this.music_volume = percent;
		this.update_volume(this.current);
	}
	
	function update_volume(song) {
		if (song != null) {
			volume = this.music_volume * this.get_song_normalization(song);
			// pygame.mixer.music.set_volume(volume / 100.0)
		}
	}
	
	function set_sfx_volume(percent) {
		percent = Math.max(0, Math.min(100, Math.floor(percent)));
		this.sfx_volume = percent;
		this.sounds = {};
	}
	
	function get_music_volume() {
		return this.music_volume;
	}
	
	function get_sfx_volume() {
		return this.sfx_volume;
	}
	
	function play_sound(path) {
		if (path.contains('.')) {
			throw new Exception("Do not include file extension in play_sound");
		}

		if (is_music_off()) return;

		snd = this.sounds.get(path);
		if (snd == null) {
			fpath = 'sound/sfx/' + path + '.ogg';
			snd = this.sounds.get(fpath);
			if (snd == null) {
				snd = Audio.SoundResource.loadFromResource(fpath);
				volume = this.sfx_volume / 100.0;
				if (path.startsWith('talk')) {
					if (path.contains('high')) {
						volume = volume / 2;
					}
					volume = volume / 3;
				}
				if (path.contains('menumove')) {
					volume = volume / 4;
				}
				snd.setDefaultVolume(volume);
				this.sounds[path] = snd;
			} else {
				this.sounds[path] = snd;
			}
		}
		snd.play();
	}
	
	function ensure_current_song(songId) {
		if (is_music_off()) return;
		if (songId == 'bossmusic' && this.current == 'stringtheory') {
			this.ensure_current_song('stringtheory');
			return;
		}

		if (songId == null) {
			Audio.Music.stop();
			return;
		}
		
		if (this.current != songId) {
			songPath = 'sound/music/' + songId + '.ogg';
			this.current = songId;
			this.update_volume(songId);
			music = this.musics.get(songPath);
			if (music == null) {
				music = Audio.Music.loadFromResource(songPath);
				this.musics[songPath] = music;
			}
			music.play(true);
		}
	}
	
	function get_song_for_level(level) {
		return this.music_map.get(level, 'astrophysics');
	}
	
	function update(levelname) {
		song = this.get_song_for_level(levelname);
		// if (levelname == '99-0' && this.current == 'stringtheory' && song != 'stringtheory')
		//	return;
			
		this.ensure_current_song(song);
	}
}
