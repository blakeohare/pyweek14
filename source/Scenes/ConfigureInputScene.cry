import Graphics2D;

class ClickyButton {

	field id;
	field text;
	field on_color;
	field off_color;
	field pressed_color;
	field pressed;
	field left;
	field top;
	field size;
	field enabled;
	field on_img;
	field off_img;
	field pressed_img;
	field right;
	field bottom;
	field im;
	field action;
	field get_label;
	field last_text;
	
	constructor(id, x, y, text, on_color, off_color, pressed_color, action, get_label) {
		this.id = id;
		this.text = text;
		this.on_color = on_color;
		this.off_color = off_color;
		this.pressed_color = pressed_color;
		this.pressed = false;
		this.left = x;
		this.top = y;
		size = 14;
		this.size = size;
		this.enabled = true;
		if (text != null) {
			this.on_img = get_text(text, size, on_color);
			this.off_img = get_text(text, size, off_color);
			this.pressed_img = get_text(text, size, pressed_color);
			this.right = x + this.off_img.width;
			this.bottom = y + this.off_img.height;
		} else {
			this.right = x + 10;
			this.bottom = y + get_text("!y", size, 'black').height;
		}
		this.im = get_input_manager();
		this.action = action;
		this.get_label = get_label;
		this.last_text = null;
	}
	
	function is_mouse_over() {
		xy = this.im.get_cursor_position();
		x = xy[0];
		y = xy[1];
		if (this.left > x || this.right < x || this.top > y || this.bottom < y) {
			return false;
		}
		return true;
	}
	
	function is_pressing() {
		return this.is_mouse_over() && this.im.get_mouse_status();
	}
		
	function render(screen) {
		if (this.get_label != null) {
			label = this.get_label(this.id);
			if (label == '---') { // horrible hack
				this.enabled = false;
			} else {
				this.enabled = true;
			}
			if (label != this.last_text) {
				this.pressed_img = get_text(label, this.size, this.pressed_color);
				this.on_img = get_text(label, this.size, this.on_color);
				this.off_img = get_text(label, this.size, this.off_color);
				this.bottom = this.on_img.height + this.top;
				this.right = this.on_img.width + this.left;
			}
		}
		
		if (!this.enabled) {
			img = this.off_img;
		} else if (this.is_pressing()) {
			img = this.pressed_img;
		} else if (this.is_mouse_over()) {
			img = this.on_img;
		} else {
			img = this.off_img;
		}
		
		img.draw(this.left, this.top);
	}
	
	function on_click() {
		if (this.enabled) {
			this.action(this.id);
		}
	}
}

class ConfigureInputScene {

	field next;
	field key_command_color;
	field use_mouse_label;
	field labels;
	field buttons;
	field im;
	field js_option_coords;
	field js_config_x;
	field js_config_y;
	field keys;
	
	constructor() {
		this.next = this;
		hb = this.handle_button;
		a = [255, 255, 0];
		b = [255, 255, 255];
		c = [128, 128, 255];
		this.labels = [];
		heading = [200, 200, 200];
		heading_size = 20;
		command_color = [128, 180, 255];
		key_command_color = [255, 255, 255];
		use_mouse_label_size = 18;
		
		js_option_y_coords = [];
		this.key_command_color = key_command_color;
		use_mouse_label = get_text("Use the mouse for this screen", use_mouse_label_size, [100, 255, 100]);
		this.use_mouse_label = use_mouse_label;
		
		js_label = get_text("Select Active Joystick", heading_size, heading);
		this.labels.add([[10, 10], js_label]);
		y = 10 + 10 + js_label.height;
		x = 20;
		js_option_y_coords.add(y);
		
		this.buttons = [new ClickyButton('no joystick', x, y, "None", a, b, c, hb, null)];
		this.buttons.add(new ClickyButton('exit', 300, 5, "Return to Main Menu", a, b, c, hb, null));
		im = get_input_manager();
		i = 1;
		this.im = im;
		for (js : im.actual_joysticks) {
			y += 20;
			js_option_y_coords.add(y);
			this.buttons.add(new ClickyButton('joystick ' + str(i), x, y, js.get_name(), a, b, c, hb, null));
			i += 1;
		}
		
		this.js_option_coords = js_option_y_coords;
		
		y += 30;
		gl = this.get_button_label;
		this.labels.add([[10, y], get_text("Commands", heading_size, heading)]);
		y += 20;
		col1 = 20;
		col2 = 115;
		col3 = 205;
		this.js_config_x = col3;
		this.js_config_y = [];
		this.keys = [
			null,
			['left', "Left", "Left Arrow"],
			['right', "Right", "Right Arrow"],
			['up', "Up", "Up Arrow"],
			['down', "Down", "Down Arrow"],
			['start', "Pause/Confirm", "Enter"],
			['spray', "Decontaminant", "Space"],
			['walkie', "Walkie Talkie", "W"],
			[null, "Quit", 'Esc / Alt+F4']];
		for (command : this.keys) {
			
			start_y = y;
			this.js_config_y.add(y);
			if (command == null) {
				this.labels.add([[col2, y], get_text("Key", 14, heading)]);
				this.labels.add([[col3, y], get_text("Joystick", 14, heading)]);
			} else {
				this.labels.add([[col1, y], get_text(command[1], 14, command_color)]);
				if (command[0] == null) {
					this.labels.add([[col2, y], get_text(command[2], 14, key_command_color)]);
				} else {
					this.buttons.add(new ClickyButton('keyconfig ' + command[0], col2, y, null, a, b, c, hb, gl));
					this.buttons.add(new ClickyButton('jsconfig ' + command[0], col3, y, null, a, b, c, hb, gl));
				}
			}
			y += 16;
		}
	}
	
	function get_button_label(id) {
		parts = id.split(' ');
		if (parts[0] == 'jsconfig') {
			return this.im.get_config_label_for_key_for_active(parts[1]);
		} else if (parts[0] == 'keyconfig') {
			return this.im.get_config_label_for_key_for_keyboard(parts[1]);
		}
		
		return " ";
	}
	
	function save_changes() {
		im = get_input_manager();
		im.save_config();
		im.save_key_config();
	}
	
	function handle_button(id) {
		im = get_input_manager();
		if (id == 'exit') {
			this.save_changes();
			this.next = new TransitionScene(new MainMenuScene(), this);
		} else if (id == 'no joystick') {
			im.set_active_actual_joystick(-1);
		} else {
			parts = id.split(' ');
			if (parts[0] == 'joystick') {
				im.set_active_actual_joystick((Core.parseInt(parts[1]) ?? 0) - 1);
			} else if (parts[0] == 'keyconfig') {
				action = parts[1];
				this.next = new SetInputScene(action, true, this);
			} else if (parts[0] == 'jsconfig') {
				action = parts[1];
				this.next = new SetInputScene(action, false, this);
			} else {
				this.next = new TransitionScene(new MainMenuScene(), this);
			}
		}
	}
	
	function process_input(events, pressed, axes, mouse) {
		for (mouse_event : mouse) {
			if (mouse_event[2] == false && mouse_event[3] == false) {
				for (button : this.buttons) {
					if (button.is_mouse_over()) {
						button.on_click();
						break;
					}
				}
			}
		}
	}
	
	function update(counter) {
		// nothing to do
	}
	
	function render(screen, counter) {
		im = get_input_manager();
		
		for (button : this.buttons) {
			button.render(screen);
		}
		for (label : this.labels) {
			
			pos = label[0];
			img = label[1];
			img.draw(pos[0], pos[1]);
		}
		
		if (((counter / 25) % 2) == 1) {
			this.use_mouse_label.draw(
				200 - this.use_mouse_label.width / 2,
				300 - this.use_mouse_label.height);
		}
		
		if (im.active_actual_joystick == -1) {
			i = 0;
		} else {
			i = im.active_actual_joystick + 1;
		}
		x = 5;
		y = this.js_option_coords[i];
		Graphics2D.Draw.rectangle(x, y + 2, 4, 4, 255, 0, 0);
	}
}
