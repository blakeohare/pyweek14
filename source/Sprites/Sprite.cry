import Math;

function get_teleporter_image(going_out, counter, type) {
	counter = min(60, max(0, counter));
	if (going_out) {
		counter = 60 - counter;
	}
	
	if (counter < 30) {
		ao = 255 - counter * 255 / 30;
		bo = 255;
	} else {
		ao = 0;
		bo = (60 - counter) * 255 / 30;
	}
	
	if (type == 'main') {
		imgs = [
			get_image('protagonist/s.png'),
			get_image('static/character' + str((Math.floor(counter / 2) % 4) + 1) + '.png')
		];
	} else {
		block_id = type['block|'.length:];
		if (going_out && counter < 6) {
			return null;
		}
		ts = get_tile_store();
		battery = block_id == '45' || block_id == '46';
		img = get_image('static/block' + str((Math.floor(counter / 2) % 4) + 1) + '.png');
		if (battery) {
			img = get_image('static/battery' + str((Math.floor(counter / 2) % 4) + 1) + '.png');
		}
		imgs = [ts.get_tile(block_id).get_image(counter), img];
	}
	
	return [ao, bo, imgs[0], imgs[1]];
}

class Sprite {
	static field _block_images_for_sprites = null;

	field garbage_collect = false;
	field x;
	field y;
	field z;
	field dx = 0;
	field dy = 0;
	field dz = 0;
	field level = null; // for intro hack, only
	field automation = null;
	field falling = false;
	field standingon = null;
	field type;
	field immobilized = false;
	field spray_counter = -1;
	field ismain;
	field main_or_hologram;
	field isjanitor;
	field holding_spray = false;
	field clone_creating = false;
	field holding_walkie = false;
	field intro_hack = false;
	field issupervisor;
	field isblock;
	field israt;
	field death_by_rat = 0;
	field impeded_last_go_round = false;
	field rat_trot_mode = null;
	field rat_blocked_counter = -42;
	field rat_move_max = 27;
	field rat_move_counter;
	field death_counter = -1;
	field death_type = null;
	field height = 4;
	field tsend;
	field trecv;
	field staticy;
	field ttype = null;
	field ttl = null;
	field last_direction_of_movement = 's';
	field direction_queue;
	field is_moving = false;
	field pushing = null;
	field block_id;
	field block_tile;
	field prototype;
	
	// sprite coordinates are assuming the grid is 16x16 tiles
	// these get transposed into pixel coordinates and
	// are converted into tile coords by simply dividing by 16
	constructor(x, y, z, type, level = null) {
		this.garbage_collect = false;
		this.x = x + 0.0;
		this.y = y + 0.0;
		this.z = z;
		this.type = type;
		this.ismain = type == 'main';
		this.main_or_hologram = this.ismain || type == 'hologram|main';
		this.isjanitor = type == 'janitor';
		this.issupervisor = type == 'supervisor';
		this.isblock = type.startsWith('block|');
		this.israt = type.startsWith('rat|');
		if (this.israt) {
			if (type.endsWith('nw')) {
				this.rat_trot_mode = 'nw';
			} else if (type.endsWith('ne')) {
				this.rat_trot_mode = 'ne';
			} else if (type.endsWith('sw')) {
				this.rat_trot_mode = 'sw';
			} else {
				this.rat_trot_mode = 'se';
			}
			this.type = 'rat';
		}
		this.rat_move_max = 27;
		this.rat_move_counter = this.rat_move_max;
		
		this.death_counter = -1;
		this.death_type = null;

		if (this.isblock) {
			this.height = 2;
		}
		this.tsend = type.startsWith('teleport|');
		this.trecv = type.startsWith('receiving|');
		this.staticy = this.tsend || this.trecv;
		this.ttype = null;
		if (this.staticy) {
			this.ttype = type.split('|')[1:].join('|');
		}
		if (this.staticy) {
			this.ttl = 60;
		}
		this.last_direction_of_movement = 's';
		this.direction_queue = ['s'];
		this.is_moving = false;
		this.pushing = null;
		if (this.isblock) {
			this.height = 2;
		}
		
		if (Sprite._block_images_for_sprites == null) {
			tile_store = get_tile_store();
			ids = tile_store.get_all_block_tiles();
			Sprite._block_images_for_sprites = {};
			for (id : ids) {
				Sprite._block_images_for_sprites[id] = tile_store.get_tile(id);
			}
		}
		
		if (this.isblock) {
			this.block_id = type.split('|')[-1]; // should be the tile ID
			this.block_tile = get_tile_store().get_tile(this.block_id);
		}
	}
	
	function set_automation(automation) {
		this.automation = automation;
		automation.sprite = this;
	}
	
	function render_me(screen, xOffset, yOffset, render_counter) {
		img = this.get_image(render_counter);
		if (img != null) {
			coords = this.pixel_position(xOffset, yOffset, img);
			
			if (this.staticy) {
				things = get_teleporter_image(this.tsend, this.ttl, this.ttype);
				if (things == null) return;
				ao = things[0];
				bo = things[1];
				ai = things[2];
				bi = things[3];
				
				for (x : [[bo, bi], [ao, ai]]) {
					o = x[0];
					img = x[1];
					img.drawWithAlpha(coords[0], coords[1], o);
				}
			} else {
				img.draw(coords[0], coords[1]);
			}
		}
			
		return [this, xOffset, yOffset, render_counter];
	}
	
	function get_image(render_counter) {
		img = null;
		if (this.main_or_hologram) {
			if (!this.ismain) {
				if (this.clone_creating) {
					return get_image('scan/character' + str(((render_counter / 2) % 4) + 1) +'.png');
				}
				if (render_counter % 2 == 1) {
					return null; // flickering holograms
				}
			} else {
				if (this.level != null && this.level.name == 'intro') {
					if (!this.intro_hack) {
						return get_image('protagonist/nwsit.png');
					}
				}
			}
			
			if (this.death_counter > 0) {
				path = 'protagonist/s.png';
				if (this.death_type == 'goo') {
					path = 'protagonist/goo' + str((Math.floor(render_counter / 3) % 4) + 1) + '.png';
				} else if (this.death_type == 'bazat') {
					path = 'protagonist/zap' + str((Math.floor(render_counter / 3) % 4) + 1) + '.png';
				}
			} else if (this.death_by_rat > 0) {
				path = 'protagonist/rat';
				path += str((Math.floor(this.death_by_rat / 3) % 4) + 1) + '.png';
			} else if (this.standingon == null) {
				path = 'protagonist/fall' + str((Math.floor(render_counter / 3) % 4) + 1) + '.png';
			} else {
				dir = this.last_direction_of_movement;
				if (this.pushing != null) {
					dir = this.pushing.lower() + 'push';
				}
				path = 'protagonist/' + dir;
				if (this.spray_counter >= 0) {
					path += 'spray' + str(((render_counter / 3) % 4) + 1);
				} else if (this.is_moving) {
					path += str([1, 2, 3, 4, 3, 2][(render_counter / 6) % 6]);
				}
				path += '.png';
			}
			img = get_image(path);
		} else if (this.israt) {
			path = 'rat/';
			if (this.death_type == 'bazat') {
				path += 'zap' + str(((render_counter / 3) % 4) + 1);
			} else {
				path += this.rat_trot_mode;
				if (this.is_moving) {
					path += str([1, 2, 3, 4, 3, 2][(render_counter / 6) % 6]);
				}
			}
			path += '.png';
			img = get_image(path);
		} else if (this.isjanitor) {
			if (this.holding_spray) {
				path = 'janitor/spray2.png';
			} else if (this.holding_walkie) {
				path = 'janitor/walkietalkie2.png';
			} else {
				dir = this.last_direction_of_movement;
				if (dir == 's' || dir == 'n') {
					dir += 'e';
				} else if (dir == 'e' || dir == 'w') {
					dir = 's' + dir;
				}
				path = 'janitor/' + dir;
				if (this.is_moving) {
					path += str([1, 2, 3, 4, 3, 2][(render_counter / 6) % 6]);
				}
				path += '.png';
			}
			img = get_image(path);
		} else if (this.issupervisor) {
			dir = this.last_direction_of_movement;
			// TODO: get n, s, e, w images of supervisor|janitor
			if (dir == 's' || dir == 'n') {
				dir += 'e';
			} else if (dir == 'e' || dir == 'w') {
				dir = 's' + dir;
			}
			path = 'supervisor/' + dir;
			if (this.is_moving) {
				path += str([1, 2, 3, 4, 3, 2][(render_counter / 6) % 6]);
			}
			path += '.png';
			img = get_image(path);
		} else if (this.staticy) {
			img = get_image('static/character' + str(((render_counter / 6) % 4) + 1) + '.png');
		} else if (this.isblock) {
			img = this.block_tile.get_image(render_counter);
		}
		
		return img;
	}
	
	function pixel_position(xOffset, yOffset, img) {
		x = this.x - this.y;
		y = (this.x + this.y) / 2;
		if (img == null) {
			w = 16;
			h = 32;
		} else {
			w = img.width;
			h = img.height;
		}
		x = x - w / 2;
		y = y - this.z - h + 8;
		if (this.isblock) {
			y += 8;
		}
		
		if (this.main_or_hologram || this.staticy || this.isjanitor || this.issupervisor || this.israt) {
			if (this.staticy && this.ttype.startsWith('block|')) {
				y += 16;
			}
			y += 8;
		}
		
		platform = this.standingon;
		if (platform != null && platform.stairs) {
			left = platform.topography[3] * 8;
			right = platform.topography[1] * 8;
			if (platform.entrance == 'SW' || platform.entrance == 'NE') {
				ap = this.y % 16 + 0.0;
				p = 16.0 - ap;
			} else {
				p = this.x % 16 + 0.0;
				ap = 16.0 - p;
			}
			dy = Math.floor((left * ap + p * right) / 16.0);
			y -= dy;
		}
		
		output = [Math.floor(x + xOffset), Math.floor(y + yOffset)];
		
		return output;
	}
	
	function debug_stats() {
		return [
			'x:', this.x,
			'y:', this.y,
			'z:', this.z,
			'dx:', this.dx,
			'dy:', this.dy,
			'dz:', this.dz].join(' ');
	}
		
	function get_replacement_sprite() {
		if (this.trecv && this.garbage_collect) {
			this.prototype.garbage_collect = false;
			return this.prototype;
		}
		return this;
	}
	
	function flip_rat_trot_mode() {
		rtm = this.rat_trot_mode;
		if (rtm == 'nw') {
			this.rat_trot_mode = 'se';
		} else if (rtm == 'se') {
			this.rat_trot_mode = 'nw';
		} else if (rtm == 'ne') {
			this.rat_trot_mode = 'sw';
		} else {
			this.rat_trot_mode = 'ne';
		}
	}
	
	function move_rat(level) {
		this.rat_blocked_counter--;
		rtm = this.rat_trot_mode;
		if (this.rat_blocked_counter == 0) {
			this.flip_rat_trot_mode();
		}
		
		if (this.z < -200) {
			this.garbage_collect = true;
		}
		
		if (this.rat_blocked_counter < 0) {
			if (this.impeded_last_go_round) {
				this.rat_blocked_counter = 60;
			} else {
				v = 0.8;
				if (rtm == 'nw') {
					this.dx = -v;
				} else if (rtm == 'ne') {
					this.dy = -v;
				} else if (rtm == 'sw') {
					this.dy = v;
				} else {
					this.dx = v;
				}
				
				newx = this.x + this.dx;
				newy = this.y + this.dy;
				col = Math.floor(newx / 16);
				row = Math.floor(newy / 16);
				layer = Math.floor(this.z / 8) - 1;
				if (layer >= 0) {
					tile = level.get_tile_at(col, row, layer);
				} else {
					tile = null;
				}
				
				if (tile == null || !tile.blocking) {
					this.rat_blocked_counter = 60;
					this.dx = 0;
					this.dy = 0;
				}
			}
		}
	}
	
	function update(level) {
		this.death_counter -= 1;
		this.spray_counter -= 1;
		
		if (this.israt) {
			this.move_rat(level);
		}
		
		if (this.death_counter == 1) {
			this.garbage_collect = true;
		}
		
		if (this.automation != null) {
			auto_xy = this.automation.get_next_values();
			this.dx += auto_xy[0];
			this.dy += auto_xy[1];
		}
		
		this.pushing = null;
		this.falling = false;
		if (this.ttl != null) {
			this.ttl -= 1;
			if (this.ttl <= 0) {
				this.garbage_collect = true;
				if (this.trecv) {
					this.prototype.x = this.x;
					this.prototype.y = this.y;
					this.prototype.z = this.z;
					this.prototype.is_moving = false;
					this.prototype.immobilized = false;
				}
			}
		}
		
		if (this.immobilized) {
			return;
		}
		
		if (this.standingon == null) {
			this.dz = -1;
		}

		if (this.dz != 0) {
			platform_data = level.get_platform_below(Math.floor(this.x) / 16, Math.floor(this.y) / 16, this.z, true);
			if (platform_data != null) {
				z = platform_data[0];
				platform = platform_data[1];
				if (z < this.dz + this.z) {
					this.z += this.dz;
					this.falling = true;
				} else {
					this.z = z;
					this.standingon = platform;
				}
			} else {
				this.standingon = null;
				this.z += this.dz;
			}
		}
		layer = this.z / 8;
		on_new_coordinates_now = false;
		new_platform = this.standingon;
		
		starting_col = Math.floor(this.x) / 16;
		starting_row = Math.floor(this.y) / 16;
		
		if (this.standingon != null) {
			if (this.standingon.teleporter && !this.staticy) {
				destination = level.teleporters.get_destination(starting_col, starting_row, Math.floor(this.z / 8) - 1);
				
				if (destination != null) {
					if (destination == 'blocked') {
						// TODO: play blocked sound
					} else {
						level.teleporters.teleport_sprite(this, destination);
					}
				}
			}
		}
		
		if (this.dz == 0) {
			
			ending_col = Math.floor(this.x + this.dx) / 16;
			ending_row = Math.floor(this.y + this.dy) / 16;
			
			check_these = [];
			if (starting_col == ending_col && starting_row == ending_row) {
				// if we were cool with it before, we're cool with it now
				direction = null;
				opposite = null;
			} else if (starting_col != ending_col && starting_row != ending_row) {
				// player moved diagonally to another tile and skipped over intermediate tiles
				// check one of the tiles between to make sure there's a path.
				check_these.add([ending_col, starting_row]);
				check_these.add([ending_col, ending_row]);
				if (starting_col < ending_col) {
					if (starting_row < ending_row) {
						direction = 'S';
						opposite = 'N';
					} else {
						direction = 'E';
						opposite = 'W';
					}
				} else {
					if (starting_row < ending_row) {
						direction = 'W';
						opposite = 'E';
					} else {
						direction = 'N';
						opposite = 'S';
					}
				}
			} else {
				// player moved to a tile cardinally next to it
				check_these.add([ending_col, ending_row]);
				if (starting_col == ending_col) {
					if (starting_row < ending_row) {
						direction = 'SW';
						opposite = 'NE';
					} else {
						direction = 'NE';
						opposite = 'SW';
					}
				} else {
					if (starting_col < ending_col) {
						direction = 'SE';
						opposite = 'NW';
					} else {
						direction = 'NW';
						opposite = 'SE';
					}
				}
			}
			
			blocked = false;
			topToBottom = true;
			clearance = py_range(this.height);
			if (topToBottom) {
				clearance = clearance[::-1];
			}
			cellLookup = level.cellLookup;
			tilestack = level.grid;
			for (check : check_these) {
				col = check[0];
				row = check[1];
				if (col < 0 || col >= level.width || row < 0 || row >= level.height) {
					blocked = true;
					this.impeded_last_go_round = true;
					break;
				}
				lookup = cellLookup[col][row];
				tiles = tilestack[col][row];
				for (c : clearance) {
					if (lookup.length > c + layer && lookup[c + layer] != null) {
						tz = lookup[c + layer];
						t = tiles[tz];
						
						if (t.blocking) {
							if (this.main_or_hologram) {
								pt = level.get_push_tracker(this);
								prev_push_target = pt.push_target;
								pt.push_target = null;
								
								if (this.ismain && t.isexit) {
									level.complete = true;
								}
								
								if (t.pushable && direction != null && direction.length == 2) {
									blocked = true;
									push_key = col + '^' + row + '^' + tz;
									pt.push_target = push_key;

									if (direction == 'NW') {
										tcol = col - 1;
										trow = row;
									} else if (direction == 'NE') {
										tcol = col;
										trow = row - 1;
									} else if (direction == 'SW') {
										tcol = col;
										trow = row + 1;
									} else if (direction == 'SE') {
										tcol = col + 1;
										trow = row;
									} else {
										throw new Exception("ERROR: bad direction while pushing block.");
									}
									
									this.pushing = direction;
									
									if (push_key == prev_push_target) {
										pt.push_counter -= 1;
									} else {
										pt.push_counter = pt.max_push_counter;
									}
									
									if (pt.push_counter == 0) {
										// Try to do the push
										if (tcol >= 0 && tcol < level.width && trow >= 0 && trow < level.height) {
											tlookup = level.cellLookup[tcol][trow];
											tstack = level.grid[tcol][trow];
											bottom_free = true;
											top_free = true;
											bottom_index = c + layer - 1;
											top_index = c + layer;
											
											if (tlookup.length > bottom_index) {
												bottom_index = tlookup[bottom_index];
												if (bottom_index != null) {
													if (tstack[bottom_index].blocking || tstack[bottom_index].cant_push_over) {
														bottom_free = false;
													}
												}
											}
											
											if (tlookup.length > top_index) {
												top_index = tlookup[top_index];
												if (top_index != null) {
													if (tstack[top_index].blocking || tstack[top_index].cant_push_over) {
														top_free = false;
													}
												}
											}
											
											if (bottom_free && top_free) {
												// TODO: make sure you're not pushing onto a ramp
												target_level = c + layer - 1;
												while (tlookup.length <= target_level) {
													tstack.add(null);
													tlookup.add(null);
												}
												_t = tlookup[target_level - 1];
												_i = target_level - 1;
												while (_i >= 0 && _t == null) {
													_t = tlookup[_i];
													_i -= 1;
												}
												
												if (_i == -1) {
													_t = -1;
												}
												
												valid = true;
												while (_t >= 0) {
													landing_tile = tstack[_t];
													
													if (landing_tile != null) {
														if (landing_tile.stairs) {
															valid = false;
														} else if (landing_tile.no_blocks) {
															valid = false;
														} else {
															valid = true;
														}
														break;
													}
													_t -= 1;
												}
												
												if (valid) {
													level.push_block(this, col, row, tcol, trow, target_level);
												} else {
													pt.push_counter = -1;
													pt.push_target = null;
												}
											} else {
												pt.push_counter = -1;
												pt.push_target = null;
											}
											break;
										} else {
											pt.push_counter = -1;
											pt.push_target = null;
										}
									}
								}
							}
							
							// The target tile will always be last in check_these
							if (blocked == false && t.stairs && t.entrance == opposite && check == check_these[-1]) {
								if (c == 0) {
									// not blocked
									zbefore = this.z;
									this.z += t.height * 8;
									break;
								}
							} else {
								blocked = true;
								break;
							}
						}
					}
				}
				
				if (blocked) {
					break;
				}
			}
			
			if (!blocked) {
				old_col = Math.floor(this.x / 16);
				old_row = Math.floor(this.y / 16);
				this.x += this.dx;
				this.y += this.dy;
				this.impeded_last_go_round = false;
				new_col = Math.floor(this.x / 16);
				new_row = Math.floor(this.y / 16);
				if (old_col != new_col || old_row != new_row) {
					on_new_coordinates_now = true;
				}
				
				new_layer = Math.floor(this.z / 8);
				
				occupying = level.get_tile_at(new_col, new_row, new_layer);
				if (occupying != null && occupying.is_goo && this.main_or_hologram) {
					this.death_counter = 60;
					this.death_type = 'goo';
					this.immobilized = true;
					play_sound("irradiated");
				}
			}
			
			this.impeded_last_go_round = blocked;
			
			omg_hax = this.dx != 0 || this.dy != 0;
			this.is_moving = omg_hax;
			if (this.automation == null) {
				omg_hax = this.dx != 0 && this.dy != 0;
			}
			
			if (this.dx == 0 && this.dy == 0) {
				this.direction_queue = [];
			}
			
			if (omg_hax) {
				distance = (this.dx * this.dx + this.dy * this.dy) ** .5;
				ndx = this.dx / distance;
				ndy = this.dy / distance;
				
				tolerance = .35;
				dy_off = ndy > -tolerance && ndy < tolerance;
				dx_off = ndx < tolerance && ndx > -tolerance;
				
				d = null;
				
				if (dx_off) {
					if (dy_off) {
						// pass
					} else if (ndy < 0) {
						d = 'ne';
					} else {
						d = 'sw';
					}
				} else if (ndx < 0) {
					if (dy_off) {
						d = 'nw';
					} else if (ndy < 0) {
						d = 'n';
					} else {
						d = 'w';
					}
				} else {
					if (dy_off) {
						d = 'se';
					} else if (ndy < 0) {
						d = 'e';
					} else {
						d = 's';
					}
				}
				if (d != null) {
					this.last_direction_of_movement = d;
					this.direction_queue = [d] + this.direction_queue[:4];
					if (this.direction_queue.length == 5) {
						a = this.direction_queue[0];
						b = this.direction_queue[1];
						c = this.direction_queue[2];
						d = this.direction_queue[3];
						e = this.direction_queue[4];
						if (a.length == 1 && 
							d == e && 
							d.length == e.length && 
							d.contains(a) &&
							((b == c && (b == a || b == d)) || (b == a && c == d))) { // BWAHAHAHAHAHA
							
							this.last_direction_of_movement = d;
						}
					} else {
						for (foo : this.direction_queue) {
							if (foo.length == 2) {
								this.last_direction_of_movement = foo;
								break;
							}
						}
					}
				}
			}
		}
		
		if (new_platform != null && new_platform.stairs && on_new_coordinates_now) {
			if (direction == new_platform.entrance) {
				this.z -= new_platform.height * 8;
			}
		}
		
		if (this.dz == 0) {
			col = Math.floor(this.x / 16);
			row = Math.floor(this.y / 16);
			layer = Math.floor(this.z - 1) / 8;
			lookup = level.cellLookup[col][row];
			if (layer < lookup.length) {
				_t = lookup[layer];
				if (_t == null) {
					this.standingon = null;
				} else {
					tile = level.grid[col][row][_t];
					if (tile.blocking) {
						this.standingon = tile;
					} else {
						this.standingon = null;
					}
				}
			} else {
				this.standingon = null;
			}
		}
		
		if (this.isblock && this.standingon != null) {
			// turn me back into a real block
			this.garbage_collect = true;
			level.modify_block(Math.floor(this.x / 16), Math.floor(this.y / 16), Math.floor(this.z / 8), this.block_tile);
		}
		
		this.dx = 0;
		this.dy = 0;
		this.dz = 0;
		
		if (this.main_or_hologram) {
			this.try_pick_up_powerups(level);
		}
	}
	
	function try_pick_up_powerups(level) {
		col = Math.floor(this.x / 16);
		row = Math.floor(this.y / 16);
		layer = Math.floor(this.z / 8);
		if (layer < 0) return;
		tile = level.get_tile_at(col, row, layer);
		if (tile != null && tile.powerup) {
			play_sound('pickup');
			level.modify_block(col, row, layer, null);
			if (tile.goo) {
				increment_persisted_level_int('decontaminant', tile.goo_size);
			} else {
				increment_persisted_level_int('research', 1);
			}
		}
	}
}
